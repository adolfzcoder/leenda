/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ownermodules;

import auth.LoginPage;
import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

import models.User;

/**
 *
 * @author timmy
 */
public class ManageFleet extends javax.swing.JFrame {

    /**
     * Creates new form CarListing
     */
    public User user;
    public ManageFleet(User user) {
        // Set Nimbus look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();  // Handle any exceptions
        }
        this.user = user;
        this.setTitle("Manage Fleet");
        this.setVisible(true);
         initComponents();
        
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblDashboard = new javax.swing.JLabel();
        lblCarlisting = new javax.swing.JLabel();
        lblBooking = new javax.swing.JLabel();
        lblUsermanagement = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnPrintCarListing = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarListing = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        lblRenterID = new javax.swing.JLabel();
        txtCarName = new javax.swing.JTextField();
        lblCarID = new javax.swing.JLabel();
        txtCarType = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtCarYear = new javax.swing.JTextField();
        lblCarmake = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        lblDailyrate = new javax.swing.JLabel();
        txtDailyRate = new javax.swing.JTextField();
        btnEditCarListing = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtVin = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtVinDel = new javax.swing.JTextField();
        btnDeleteCarListing = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(237, 223, 205));

        jPanel2.setBackground(new java.awt.Color(217, 186, 164));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Leenda");

        lblDashboard.setBackground(new java.awt.Color(133, 62, 52));
        lblDashboard.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblDashboard.setForeground(new java.awt.Color(133, 62, 52));
        lblDashboard.setText("Dashboard");
        lblDashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExited(evt);
            }
        });

        lblCarlisting.setBackground(new java.awt.Color(133, 62, 52));
        lblCarlisting.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblCarlisting.setForeground(new java.awt.Color(133, 62, 52));
        lblCarlisting.setText("Manage Fleet");

        lblBooking.setBackground(new java.awt.Color(133, 62, 52));
        lblBooking.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblBooking.setForeground(new java.awt.Color(133, 62, 52));
        lblBooking.setText("Booking");
        lblBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExited(evt);
            }
        });

        lblUsermanagement.setBackground(new java.awt.Color(133, 62, 52));
        lblUsermanagement.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblUsermanagement.setForeground(new java.awt.Color(133, 62, 52));
        lblUsermanagement.setText("User Management");
        lblUsermanagement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblUsermanagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseExited(evt);
            }
        });

        btnLogout.setBackground(new java.awt.Color(237, 233, 205));
        btnLogout.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnLogout.setText("Log Out");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDashboard)
                .addGap(54, 54, 54)
                .addComponent(lblCarlisting)
                .addGap(76, 76, 76)
                .addComponent(lblBooking)
                .addGap(79, 79, 79)
                .addComponent(lblUsermanagement)
                .addGap(101, 101, 101)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblDashboard)
                    .addComponent(lblCarlisting)
                    .addComponent(lblBooking)
                    .addComponent(btnLogout)
                    .addComponent(lblUsermanagement))
                .addGap(12, 12, 12))
        );

        jPanel3.setBackground(new java.awt.Color(217, 186, 164));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(133, 62, 52));
        jLabel6.setText("Manage Fleet");

        btnPrintCarListing.setBackground(new java.awt.Color(237, 233, 205));
        btnPrintCarListing.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnPrintCarListing.setText("Print Car Listing");
        btnPrintCarListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintCarListingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(273, 273, 273)
                .addComponent(btnPrintCarListing)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btnPrintCarListing))
                .addGap(11, 11, 11))
        );

        tblCarListing.setBackground(new java.awt.Color(217, 186, 164));
        tblCarListing.setBackground(new java.awt.Color(217, 186, 164));
        // Create a new DefaultTableModel with the column names
        DefaultTableModel model = new DefaultTableModel(new Object[] {"Car Name", "Car Year", "Car Type", "Daily Rate", "Status", "VIN", "Car Owner Email"}, 0);
        tblCarListing.setModel(model);
        // Read the cars.csv file
        String filePath = "src\\storage\\cars.csv";
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean isFirstRow = true;
            while ((line = br.readLine()) != null) {
            if (isFirstRow) {
                isFirstRow = false;
                continue; // Skip the first row
            }
            String[] row = line.split(",");
            // Adjust the row data to match the column order
            model.addRow(new Object[] {row[2], row[3], row[4], row[5], row[6], row[8], row[9]});
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        jScrollPane1.setViewportView(tblCarListing);

        jPanel4.setBackground(new java.awt.Color(217, 186, 164));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblRenterID.setBackground(new java.awt.Color(133, 62, 52));
        lblRenterID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblRenterID.setForeground(new java.awt.Color(133, 62, 52));
        lblRenterID.setText("Car Name");

        txtCarName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txtCarName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarNameActionPerformed(evt);
            }
        });

        lblCarID.setBackground(new java.awt.Color(133, 62, 52));
        lblCarID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblCarID.setForeground(new java.awt.Color(133, 62, 52));
        lblCarID.setText("Car Type");

        txtCarType.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        jLabel9.setBackground(new java.awt.Color(133, 62, 52));
        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(133, 62, 52));
        jLabel9.setText("Car Year");

        txtCarYear.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        lblCarmake.setBackground(new java.awt.Color(133, 62, 52));
        lblCarmake.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblCarmake.setForeground(new java.awt.Color(133, 62, 52));
        lblCarmake.setText("Status");

        txtStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        lblDailyrate.setBackground(new java.awt.Color(133, 62, 52));
        lblDailyrate.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblDailyrate.setForeground(new java.awt.Color(133, 62, 52));
        lblDailyrate.setText("Daily Rate");

        txtDailyRate.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        btnEditCarListing.setBackground(new java.awt.Color(133, 62, 52));
        btnEditCarListing.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnEditCarListing.setForeground(new java.awt.Color(204, 204, 255));
        btnEditCarListing.setText("Edit Car Listing Information");
        btnEditCarListing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditCarListingMouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(133, 62, 52));
        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(133, 62, 52));
        jLabel2.setText("Vin");

        txtVin.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtVin, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCarName)
                                .addComponent(lblRenterID)
                                .addComponent(lblCarID)
                                .addComponent(txtCarType, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(106, 106, 106)
                                    .addComponent(lblDailyrate))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblCarmake)
                                        .addComponent(txtCarYear)
                                        .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDailyRate, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)))))
                        .addComponent(btnEditCarListing, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRenterID)
                    .addComponent(jLabel9)
                    .addComponent(lblDailyrate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCarYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDailyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarID)
                    .addComponent(lblCarmake)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCarType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtVin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnEditCarListing)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(217, 186, 164));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("Delete a car with VIN");

        jLabel13.setBackground(new java.awt.Color(133, 62, 52));
        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(133, 62, 52));
        jLabel13.setText("VIN");

        txtVinDel.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        btnDeleteCarListing.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnDeleteCarListing.setText("Delete Car Listing Information");
        btnDeleteCarListing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarListingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDeleteCarListing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtVinDel)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel12)
                .addGap(30, 30, 30)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtVinDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeleteCarListing)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 19, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteCarListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarListingActionPerformed
        String vin = txtVinDel.getText().trim(); // Get and trim the VIN input
    
        // Check if the VIN is empty
        if (vin.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a VIN.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if VIN is empty
        }
    
        String filePath = "src/storage/cars.csv"; // Path to the CSV file
        File inputFile = new File(filePath);
        File tempFile = new File(inputFile.getAbsolutePath() + ".tmp"); // Temporary file
    
        BufferedReader reader = null;
        BufferedWriter writer = null;
    
        try {
            reader = new BufferedReader(new FileReader(inputFile));
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile), "UTF-8"));
    
            String line;
            boolean carFound = false; // Flag to check if car is found
    
            // Read each line from the original file
            while ((line = reader.readLine()) != null) {
                String[] cars = line.split(",");
                String existingVin = cars[8]; // Adjust index based on your CSV structure
    
                // Check if the current line's VIN matches the one to delete and belongs to the logged-in user
                if (existingVin.equals(vin) && cars[9].equals(user.getEmail())) { // Assuming the first column is the user email
                    carFound = true; // Car found
    
                    // Ask for confirmation to delete
                    int confirmation = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to delete the car with VIN: " + vin + "?",
                        "Confirm Deletion",
                        JOptionPane.YES_NO_OPTION);
    
                    if (confirmation == JOptionPane.YES_OPTION) {
                        // If confirmed, skip writing this line to temp file (i.e., delete)
                        continue; // Skip writing this line
                    } else {
                        // If not confirmed, write the line back to the temporary file and exit
                        writer.write(line);
                        writer.newLine();
                        JOptionPane.showMessageDialog(this, "Deletion cancelled.", "Deletion Cancelled",
                            JOptionPane.INFORMATION_MESSAGE);
                        return; // Exit the method
                    }
                } else {
                    // Write the line to the temp file if VIN does not match
                    writer.write(line);
                    writer.newLine();
                }
            }
    
            // Make sure to flush and close the writer before replacing files
            writer.flush();
            writer.close(); // Close the writer first
            reader.close(); // Then close the reader
    
            // Check if car was found and deleted
            if (carFound) {
                // Replace the original file with the updated file
                if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
                    JOptionPane.showMessageDialog(this, "Error updating file. Please try again.", "File Update Error",
                        JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Car data deleted successfully.", "Deletion Successful",
                        JOptionPane.INFORMATION_MESSAGE);
                    // Optionally refresh your table or UI here
                    // populateTable(tblCarListing, "src/storage/carDetails.csv");
                    txtVinDel.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(this, "VIN not found.", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
            }
    
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading/writing to file: " + e.getMessage(), "File Error",
                JOptionPane.ERROR_MESSAGE);
        } finally {
            // Ensure resources are closed in case of an exception
            try {
                if (reader != null) {
                    reader.close();
                }
                if (writer != null) {
                    writer.close();
                }
            } catch (IOException e) {
                // Handle exception during resource closing
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnDeleteCarListingActionPerformed

    private void btnPrintCarListingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintCarListingActionPerformed
        try {
             String title = "Leenda - Car Listing";

            // Get the current date and time to display at the bottom (footer) of the page
            String footer = "Generated on: " + new SimpleDateFormat("EEEE, d MMM yyyy hh:mm:ss a").format(new Date());

            // Use the JTable's print method to print the table
            boolean complete = tblCarListing.print();
            if (complete) {
                // If printing is complete, show a success message
                JOptionPane.showMessageDialog(null, "Printing Complete", "Print", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // If printing was cancelled, show a message
                JOptionPane.showMessageDialog(null, "Printing Cancelled", "Print", JOptionPane.WARNING_MESSAGE);
            }
        } catch (HeadlessException | PrinterException ex) {
            // If an error occurs during printing, show an error message
            JOptionPane.showMessageDialog(null, "Error printing table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_btnPrintCarListingActionPerformed

    

    private void txtCarNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarNameActionPerformed
        private void btnEditCarListingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditCarListingMouseClicked
            // No need to get carOwnerEmail as it is the same as the logged-in user
            String carName = txtCarName.getText().trim();
            String carType = txtCarType.getText().trim();
            String carYear = txtCarYear.getText().trim();
            String status = txtStatus.getText().trim();
            String dailyRate = txtDailyRate.getText().trim();
            String vin = txtVin.getText().trim();

            // Validation checks
            int filledFields = 0;

            // Read the existing values from the table for the given VIN
            String existingCarName = "";
            String existingCarType = "";
            String existingCarYear = "";
            String existingStatus = "";
            String existingDailyRate = "";

            for (int i = 0; i < tblCarListing.getRowCount(); i++) {
                if (tblCarListing.getValueAt(i, 5).equals(vin)) {
                    existingCarName = (String) tblCarListing.getValueAt(i, 0);
                    existingCarType = (String) tblCarListing.getValueAt(i, 2);
                    existingCarYear = (String) tblCarListing.getValueAt(i, 1);
                    existingStatus = (String) tblCarListing.getValueAt(i, 4);
                    existingDailyRate = (String) tblCarListing.getValueAt(i, 3);
                    break;
                }
            }

            // If fields are empty, use existing values
            if (carName.isEmpty()) carName = existingCarName;
            if (carType.isEmpty()) carType = existingCarType;
            if (carYear.isEmpty()) carYear = existingCarYear;
            if (status.isEmpty()) status = existingStatus;
            if (dailyRate.isEmpty()) dailyRate = existingDailyRate;
            if (!carName.isEmpty()) filledFields++;
            if (!carType.isEmpty()) filledFields++;
            if (!carYear.isEmpty()) filledFields++;
            if (!status.isEmpty()) filledFields++;
            if (!dailyRate.isEmpty()) filledFields++;

            if (filledFields < 2) {
                JOptionPane.showMessageDialog(this, "Please fill in at least 2 fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (vin.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter the VIN.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!carName.isEmpty() && carName.length() < 3) {
                JOptionPane.showMessageDialog(this, "Car Name should be at least 3 characters long.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!carType.isEmpty() && carType.length() < 3) {
                JOptionPane.showMessageDialog(this, "Car Type should be at least 3 characters long.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!carYear.isEmpty()) {
                try {
                    int year = Integer.parseInt(carYear);
                    if (year < 1886 || year > new Date().getYear() + 1900) { // First car invented in 1886
                        JOptionPane.showMessageDialog(this, "Please enter a valid Car Year.", "Input Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Car Year should be a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (!status.isEmpty() && status.length() < 3) {
                JOptionPane.showMessageDialog(this, "Status should be at least 3 characters long.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!dailyRate.isEmpty()) {
                try {
                    double rate = Double.parseDouble(dailyRate);
                    if (rate < 0) {
                        JOptionPane.showMessageDialog(this, "Daily Rate should be a positive number.", "Input Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Daily Rate should be a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            if (!vin.matches("[A-HJ-NPR-Z0-9]{17}")) {
                JOptionPane.showMessageDialog(this, "VIN should be 17 characters long and contain only digits and capital letters (excluding I, O, and Q).", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String filePath = "src/storage/cars.csv"; // Path to the CSV file
            File inputFile = new File(filePath);
            File tempFile = new File(inputFile.getAbsolutePath() + ".tmp"); // Temporary file

            BufferedReader reader = null;
            BufferedWriter writer = null;

            try {
                reader = new BufferedReader(new FileReader(inputFile));
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempFile), "UTF-8"));

                String line;
                boolean carFound = false; // Flag to check if car is found

                // Read each line from the original file
                while ((line = reader.readLine()) != null) {
                    String[] cars = line.split(",");
                    String existingVin = cars[8]; // Adjust index based on your CSV structure

                    // Check if the current line's VIN matches the one to edit and belongs to the logged-in user
                    if (existingVin.equals(vin) && cars[9].equals(user.getEmail())) { // Assuming the first column is the carOwner Email
                        carFound = true; // Car found

                        // Update the car details
                        cars[2] = carName;
                        cars[3] = carYear;
                        cars[4] = carType;
                        cars[6] = status;
                        cars[5] = dailyRate;

                        // Write the updated line to the temp file
                        writer.write(String.join(",", cars));
                        writer.newLine();
                    } else {
                        // Write the line to the temp file if VIN does not match
                        writer.write(line);
                        writer.newLine();
                    }
                }

                // Make sure to flush and close the writer before replacing files
                writer.flush();
                writer.close(); // Close the writer first
                reader.close(); // Then close the reader

                // Check if car was found and updated
                if (carFound) {
                    // Replace the original file with the updated file
                    if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
                        JOptionPane.showMessageDialog(this, "Error updating file. Please try again.", "File Update Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Car data updated successfully.", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
                        // Optionally refresh your table or UI here
                        DefaultTableModel model = (DefaultTableModel) tblCarListing.getModel();
                        model.setRowCount(0); // Clear existing rows

                        // Re-read the cars.csv file and populate the table
                        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                            String csvLine;
                            boolean isFirstRow = true;
                            while ((csvLine = br.readLine()) != null) {
                                if (isFirstRow) {
                                    isFirstRow = false;
                                    continue; // Skip the first row
                                }
                                String[] row = csvLine.split(",");
                                // Adjust the row data to match the column order
                                model.addRow(new Object[] {row[2], row[3], row[4], row[5], row[6], row[8], row[9]});
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        // populateTable(tblCarListing, "src/storage/carDetails.csv");
                        txtCarName.setText("");
                        txtCarType.setText("");
                        txtCarYear.setText("");
                        txtStatus.setText("");
                        txtDailyRate.setText("");
                        txtVin.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "VIN not found.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading/writing to file: " + e.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                // Ensure resources are closed in case of an exception
                try {
                    if (reader != null) {
                        reader.close();
                    }
                    if (writer != null) {
                        writer.close();
                    }
                } catch (IOException e) {
                    // Handle exception during resource closing

                }
            }
        
    }//GEN-LAST:event_btnEditCarListingMouseClicked

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageFleet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageFleet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageFleet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageFleet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageFleet(null).setVisible(true);
            }
        });


        
    }
// open car owner dashbaord when clickedd
    private void ownerDashboardMouseClicked(java.awt.event.MouseEvent evt) throws UnsupportedLookAndFeelException {                                     
        this.dispose();
        new OwnerDashboard(user);
    } 


    // open fleet management page when clicked
    private void manageFleetMouseClicked(java.awt.event.MouseEvent evt) throws UnsupportedLookAndFeelException {                                     
        this.dispose();
        new ManageFleet(user);
    } 
    // bookedCarsMouseClicked
    private void bookedCarsMouseClicked(java.awt.event.MouseEvent evt) throws UnsupportedLookAndFeelException {                                     
        this.dispose();
        new bookedcars(user);
    } 
    // addCarMouseClicked
    private void addCarMouseClicked(java.awt.event.MouseEvent evt) throws UnsupportedLookAndFeelException {                                     
        this.dispose();
        new AddCar(user);
    } 
    // logOutMouseClicked
    private void logOutMouseClicked(java.awt.event.MouseEvent evt) throws UnsupportedLookAndFeelException {                                     
        this.dispose();
        new LoginPage();
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteCarListing;
    private javax.swing.JButton btnEditCarListing;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPrintCarListing;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBooking;
    private javax.swing.JLabel lblCarID;
    private javax.swing.JLabel lblCarlisting;
    private javax.swing.JLabel lblCarmake;
    private javax.swing.JLabel lblDailyrate;
    private javax.swing.JLabel lblDashboard;
    private javax.swing.JLabel lblRenterID;
    private javax.swing.JLabel lblUsermanagement;
    private javax.swing.JTable tblCarListing;
    private javax.swing.JTextField txtCarName;
    private javax.swing.JTextField txtCarType;
    private javax.swing.JTextField txtCarYear;
    private javax.swing.JTextField txtDailyRate;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtVin;
    private javax.swing.JTextField txtVinDel;
    // End of variables declaration//GEN-END:variables
}
