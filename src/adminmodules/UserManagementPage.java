package adminmodules;

import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import auth.AuthFunctions;
import auth.LoginPage;
import models.User;
import storage.StorageFunctions;
import validations.Validation;

import static storage.StorageFunctions.populateTable;

public class UserManagementPage extends javax.swing.JFrame {
    public User user;

    /**
     * Creates new form UserManagementPage
     */
    public UserManagementPage(User user) {
        // Set Nimbus look and feel
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                | UnsupportedLookAndFeelException e) {
            e.printStackTrace(); // Handle any exceptions
        }

        this.setTitle("User management");
        this.setResizable(false);

        this.user = user;
        initComponents();

        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);

        try {
            // Call the method and pass the path to your CSV file
            populateTable(tblUsers, "src\\storage\\userDetails.csv");
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }

        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        lblLeenda = new javax.swing.JLabel();
        lblDashboard = new javax.swing.JLabel();
        lblCarListing = new javax.swing.JLabel();
        lblBookings = new javax.swing.JLabel();
        lblUserManagement = new javax.swing.JLabel();
        btnLogout = new javax.swing.JToggleButton();
        pnlSubHeader = new javax.swing.JPanel();
        lblDashboardHeader = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        pnlEditUserPersonalInformation = new javax.swing.JPanel();
        lblUserID = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        lblDriverLicense = new javax.swing.JLabel();
        txtDriverLicense = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        btnEditUsersPersonalInformation = new javax.swing.JToggleButton();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        txtUserIDToDeleteOrChangeStatus = new javax.swing.JTextField();
        btnDeletePersonalInformation = new javax.swing.JToggleButton();
        lblUserIDToDelete = new javax.swing.JLabel();
        cboUserStatus = new javax.swing.JComboBox<>();
        lblStatus = new javax.swing.JLabel();
        btnChangeUserStatus = new javax.swing.JToggleButton();
        btnPrintUserRecords = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMain.setBackground(new java.awt.Color(237, 223, 205));

        pnlHeader.setBackground(new java.awt.Color(217, 186, 164));

        lblLeenda.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lblLeenda.setText("Leenda");

        lblDashboard.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblDashboard.setText("Dashboard");
        lblDashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDashboardMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblDashboardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblDashboardMouseExited(evt);
            }
        });

        lblCarListing.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblCarListing.setText("Car listing");
        lblCarListing.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCarListing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCarListingMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCarListingMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblCarListingMouseExited(evt);
            }
        });

        lblBookings.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblBookings.setText("Bookings");
        lblBookings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBookings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBookingsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblBookingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblBookingsMouseExited(evt);
            }
        });

        lblUserManagement.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblUserManagement.setText("User management");
        lblUserManagement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnLogout.setBackground(new java.awt.Color(237, 223, 205));
        btnLogout.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnLogout.setText("Log Out");
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogoutOnClick(evt);
            }
        });

        pnlSubHeader.setBackground(new java.awt.Color(237, 223, 205));
        pnlSubHeader.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDashboardHeader.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblDashboardHeader.setText("User management");

        javax.swing.GroupLayout pnlSubHeaderLayout = new javax.swing.GroupLayout(pnlSubHeader);
        pnlSubHeader.setLayout(pnlSubHeaderLayout);
        pnlSubHeaderLayout.setHorizontalGroup(
            pnlSubHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSubHeaderLayout.createSequentialGroup()
                .addGap(425, 425, 425)
                .addComponent(lblDashboardHeader)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlSubHeaderLayout.setVerticalGroup(
            pnlSubHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSubHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDashboardHeader)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblLeenda)
                .addGap(167, 167, 167)
                .addComponent(lblDashboard)
                .addGap(54, 54, 54)
                .addComponent(lblCarListing)
                .addGap(58, 58, 58)
                .addComponent(lblBookings)
                .addGap(59, 59, 59)
                .addComponent(lblUserManagement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(pnlSubHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLeenda, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(lblUserManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBookings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCarListing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLogout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSubHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tblUsers.setBackground(new java.awt.Color(217, 186, 164));
        tblUsers.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First name", "Last Name", "Email", "Phone number", "Driver license", "User type", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.setGridColor(new java.awt.Color(237, 223, 205));
        tblUsers.setSelectionBackground(new java.awt.Color(237, 223, 205));
        jScrollPane1.setViewportView(tblUsers);
        if (tblUsers.getColumnModel().getColumnCount() > 0) {
            tblUsers.getColumnModel().getColumn(0).setResizable(false);
            tblUsers.getColumnModel().getColumn(1).setResizable(false);
            tblUsers.getColumnModel().getColumn(2).setResizable(false);
            tblUsers.getColumnModel().getColumn(3).setResizable(false);
            tblUsers.getColumnModel().getColumn(4).setResizable(false);
            tblUsers.getColumnModel().getColumn(5).setResizable(false);
            tblUsers.getColumnModel().getColumn(6).setResizable(false);
            tblUsers.getColumnModel().getColumn(7).setResizable(false);
        }

        pnlEditUserPersonalInformation.setBackground(new java.awt.Color(217, 186, 164));

        lblUserID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblUserID.setText("User ID");

        txtUserID.setBackground(new java.awt.Color(237, 223, 205));
        txtUserID.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        lblEmail.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblEmail.setText("Email");

        txtEmail.setBackground(new java.awt.Color(237, 223, 205));
        txtEmail.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        txtLastName.setBackground(new java.awt.Color(237, 223, 205));
        txtLastName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        lblLastName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblLastName.setText("Last name");

        lblDriverLicense.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblDriverLicense.setText("Driver license");

        txtDriverLicense.setBackground(new java.awt.Color(237, 223, 205));
        txtDriverLicense.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        lblPhoneNumber.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblPhoneNumber.setText("Phone number");

        txtPhoneNumber.setBackground(new java.awt.Color(237, 223, 205));
        txtPhoneNumber.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        btnEditUsersPersonalInformation.setBackground(new java.awt.Color(133, 62, 52));
        btnEditUsersPersonalInformation.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnEditUsersPersonalInformation.setForeground(new java.awt.Color(237, 223, 205));
        btnEditUsersPersonalInformation.setText("Edit user's personal information");
        btnEditUsersPersonalInformation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditUsersPersonalInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUsersPersonalInformationOnClick(evt);
            }
        });

        lblFirstName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblFirstName.setText("First name");

        txtFirstName.setBackground(new java.awt.Color(237, 223, 205));
        txtFirstName.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        javax.swing.GroupLayout pnlEditUserPersonalInformationLayout = new javax.swing.GroupLayout(pnlEditUserPersonalInformation);
        pnlEditUserPersonalInformation.setLayout(pnlEditUserPersonalInformationLayout);
        pnlEditUserPersonalInformationLayout.setHorizontalGroup(
            pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUserID)
                            .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFirstName))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLastName)))
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPhoneNumber)
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDriverLicense)
                            .addComponent(txtDriverLicense, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnEditUsersPersonalInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        pnlEditUserPersonalInformationLayout.setVerticalGroup(
            pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                            .addComponent(lblUserID)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                            .addComponent(lblLastName)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addComponent(lblFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEditUserPersonalInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addComponent(lblPhoneNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEditUserPersonalInformationLayout.createSequentialGroup()
                        .addComponent(lblDriverLicense)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDriverLicense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnEditUsersPersonalInformation)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(217, 186, 164));

        txtUserIDToDeleteOrChangeStatus.setBackground(new java.awt.Color(237, 223, 205));
        txtUserIDToDeleteOrChangeStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        btnDeletePersonalInformation.setBackground(new java.awt.Color(237, 223, 205));
        btnDeletePersonalInformation.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnDeletePersonalInformation.setForeground(new java.awt.Color(255, 51, 51));
        btnDeletePersonalInformation.setText("Delete user personal information");
        btnDeletePersonalInformation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeletePersonalInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonalInformationOnClick(evt);
            }
        });

        lblUserIDToDelete.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblUserIDToDelete.setText("User ID");

        cboUserStatus.setBackground(new java.awt.Color(237, 223, 205));
        cboUserStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        cboUserStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "approved", "pending", "declined" }));
        cboUserStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        lblStatus.setText("Status");

        btnChangeUserStatus.setBackground(new java.awt.Color(237, 223, 205));
        btnChangeUserStatus.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnChangeUserStatus.setForeground(new java.awt.Color(133, 62, 52));
        btnChangeUserStatus.setText("Change user status");
        btnChangeUserStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnChangeUserStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeUserStatusOnClick(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChangeUserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletePersonalInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUserIDToDelete)
                            .addComponent(txtUserIDToDeleteOrChangeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStatus)
                            .addComponent(cboUserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblUserIDToDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserIDToDeleteOrChangeStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(31, 31, 31))
                    .addComponent(cboUserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChangeUserStatus)
                .addGap(18, 18, 18)
                .addComponent(btnDeletePersonalInformation)
                .addContainerGap())
        );

        btnPrintUserRecords.setBackground(new java.awt.Color(237, 223, 205));
        btnPrintUserRecords.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        btnPrintUserRecords.setText("Print user records");
        btnPrintUserRecords.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrintUserRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintUserRecordsOnClick(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPrintUserRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(pnlEditUserPersonalInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPrintUserRecords)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEditUserPersonalInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblCarListingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCarListingMouseClicked
        this.dispose();
        new CarListing(user);
    }//GEN-LAST:event_lblCarListingMouseClicked

    private void lblBookingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBookingsMouseClicked
        this.dispose();
        new BookingPage(user);
    }//GEN-LAST:event_lblBookingsMouseClicked

    private void lblCarListingMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblCarListingMouseEntered
        Functions.changeColorOfTheLabelOfTheHeaderWhenEntering(lblCarListing);
    }// GEN-LAST:event_lblCarListingMouseEntered

    private void lblCarListingMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblCarListingMouseExited
        Functions.changeColorOfTheLabelOfTheHeaderWhenExiting(lblCarListing);
    }// GEN-LAST:event_lblCarListingMouseExited

    private void lblBookingsMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblBookingsMouseEntered
        Functions.changeColorOfTheLabelOfTheHeaderWhenEntering(lblBookings);
    }// GEN-LAST:event_lblBookingsMouseEntered

    private void lblBookingsMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblBookingsMouseExited
        Functions.changeColorOfTheLabelOfTheHeaderWhenExiting(lblBookings);
    }// GEN-LAST:event_lblBookingsMouseExited

    private void lblDashboardMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblDashboardMouseClicked
        this.dispose();
        new AdminDashboard(user);
    }// GEN-LAST:event_lblDashboardMouseClicked

    private void lblDashboardMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblDashboardMouseEntered
        Functions.changeColorOfTheLabelOfTheHeaderWhenEntering(lblDashboard);
    }// GEN-LAST:event_lblDashboardMouseEntered

    private void lblDashboardMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_lblDashboardMouseExited
        Functions.changeColorOfTheLabelOfTheHeaderWhenExiting(lblDashboard);
    }// GEN-LAST:event_lblDashboardMouseExited

        private void btnDeletePersonalInformationOnClick(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnDeletePersonalInformationOnClick
            String userID = txtUserIDToDeleteOrChangeStatus.getText().trim(); // Get and trim the user ID input

            // Check if the user ID is empty
            if (Validation.checkIfTheTextFieldIsEmpty(userID, "user ID")) {
                return; // Exit if user ID is empty
            }

            String filePath = "src/storage/userDetails.csv"; // Path to the CSV file
            List<String[]> users = new ArrayList<>();
            boolean userFound = false;

            // Read existing user data
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] userDetails = line.split(",");
                    if (userDetails.length < 9)
                        continue; // Adjust based on your actual CSV structure

                    // Check if the current user ID matches the one to be deleted
                    if (userDetails[7].equals(userID)) {
                        userFound = true; // User found

                        // Ask for confirmation to delete
                        int confirmation = JOptionPane.showConfirmDialog(this,
                                "Are you sure you want to delete the data for user ID: " + userID + "?",
                                "Confirm Deletion",
                                JOptionPane.YES_NO_OPTION);

                        if (confirmation == JOptionPane.YES_OPTION) {
                            continue; // Skip adding this user to the list (i.e., delete)
                        } else {
                            JOptionPane.showMessageDialog(this, "Deletion cancelled.", "Deletion Cancelled",
                                    JOptionPane.INFORMATION_MESSAGE);
                            return; // Exit the method
                        }
                    }

                    users.add(userDetails); // Add user data (not deleted) to the list
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading user details: " + e.getMessage(), "File Read Error",
                        JOptionPane.ERROR_MESSAGE);
                return; // Exit on error
            }

            // Check if the user ID was found
            if (!userFound) {
                JOptionPane.showMessageDialog(this, "User ID not found.", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                return; // Exit if user not found
            }

            // Write updated user data back to the CSV file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath))) {
                for (String[] user : users) {
                    bw.write(String.join(",", user)); // Join fields with commas
                    bw.newLine(); // Add a newline after each user record
                }
                JOptionPane.showMessageDialog(this, "User data deleted successfully.", "Deletion Successful",
                        JOptionPane.INFORMATION_MESSAGE);
                // Optionally refresh your table or UI here
                this.revalidate();
                this.repaint();
                populateTable(tblUsers, "src/storage/userDetails.csv");
                txtUserIDToDeleteOrChangeStatus.setText("");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error writing user details: " + e.getMessage(), "File Write Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }// GEN-LAST:event_btnDeletePersonalInformationOnClick

    private void btnEditUsersPersonalInformationOnClick(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnEditUsersPersonalInformationOnClick
        String userID = txtUserID.getText().trim();
        String firstName = txtFirstName.getText().trim();
        String lastName = txtLastName.getText().trim();
        String email = txtEmail.getText().trim();
        String phoneNumber = txtPhoneNumber.getText().trim();
        String driverLicense = txtDriverLicense.getText().trim();

        // Check if the user ID is empty
        if (Validation.checkIfTheTextFieldIsEmpty(userID, "user ID")) {
            return; // Exit if user ID is empty
        }

        // Counter for filled fields
        int filledFieldCount = 0;

        // Validate first name if it's not empty
        if (!firstName.isEmpty()) {
            if (Validation.validateName(firstName)) {
            filledFieldCount++; // Increment only if the name is valid
            } else {
            JOptionPane.showMessageDialog(this, "Invalid first name.", "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
            }
        }

        // Validate last name if it's not empty
        if (!lastName.isEmpty()) {
            if (Validation.validateName(lastName)) {
            filledFieldCount++; // Increment only if the last name is valid
            } else {
            JOptionPane.showMessageDialog(this, "Invalid last name.", "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
            }
        }

        // Validate email if it's not empty
        if (!email.isEmpty()) {
            if (Validation.validateEmail(email)) {
            if (!AuthFunctions.doesEmailExist(email)) {
                filledFieldCount++; // Increment if the email is valid and doesn't already exist
            } else {
                JOptionPane.showMessageDialog(this, "Email already exists. Please use a different email.",
                    "Email Exists", JOptionPane.ERROR_MESSAGE);
                return;
            }
            } else {
            JOptionPane.showMessageDialog(this, "Invalid email address.", "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
            }
        }

        // Validate phone number if it's not empty
        if (!phoneNumber.isEmpty()) {
            if (Validation.validatePhoneNumber(phoneNumber)) {
            filledFieldCount++; // Increment if the phone number is valid
            } else {
            JOptionPane.showMessageDialog(this, "Invalid phone number.", "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
            }
        }

        // Increment the counter for the driver's license if it's filled
        if (!driverLicense.isEmpty()) {
            filledFieldCount++; // No validation needed for driver's license as it's optional
        }

        // Check if at least two additional fields are filled
        if (filledFieldCount < 2) {
            JOptionPane.showMessageDialog(this, "You must fill at least two fields other than user ID.",
                "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if less than two other fields are filled
        }

        // Update logic
        final String USER_DETAILS_FILE_PATH = "src/storage/userDetails.csv"; // Path to your user details file

        // Read existing user data
        List<String[]> users = new ArrayList<>();
        boolean userFound = false;

        try (BufferedReader br = new BufferedReader(new FileReader(USER_DETAILS_FILE_PATH))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] userDetails = line.split(",");
                if (userDetails.length < 9)
                    continue; // Adjust based on your actual CSV structure

                // Check if the current user ID matches the one to be updated
                if (userDetails[7].equals(userID)) {
                    userFound = true; // User found

                    // Update fields if they are not empty
                    if (!firstName.isEmpty())
                        userDetails[4] = firstName; // Update first name
                    if (!lastName.isEmpty())
                        userDetails[5] = lastName; // Update last name
                    if (!email.isEmpty())
                        userDetails[0] = email; // Update email
                    if (!phoneNumber.isEmpty())
                        userDetails[2] = phoneNumber; // Update phone number
                    if (!driverLicense.isEmpty())
                        userDetails[6] = driverLicense; // Update driver license
                }
                users.add(userDetails); // Add user data (updated or not) to the list
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading user details: " + e.getMessage(), "File Read Error",
                    JOptionPane.ERROR_MESSAGE);
            return; // Exit on error
        }

        // Check if the user ID was found
        if (!userFound) {
            JOptionPane.showMessageDialog(this, "User ID not found.", "Update Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if user not found
        }

        // Write updated user data back to the CSV file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(USER_DETAILS_FILE_PATH))) {
            for (String[] user : users) {
                bw.write(String.join(",", user)); // Join fields with commas
                bw.newLine(); // Add a newline after each user record
            }
            JOptionPane.showMessageDialog(this, "User details updated successfully.", "Update Success",
                    JOptionPane.INFORMATION_MESSAGE);
            // Clear input fields
            txtUserID.setText("");
            txtFirstName.setText("");
            txtLastName.setText("");
            txtEmail.setText("");
            txtPhoneNumber.setText("");
            txtDriverLicense.setText("");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing user details: " + e.getMessage(), "File Write Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        // Call the method and pass the path to the CSV file
        try {
            populateTable(tblUsers, "src\\storage\\userDetails.csv");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }// GEN-LAST:event_btnEditUsersPersonalInformationOnClick

    private void btnPrintUserRecordsOnClick(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnPrintUserRecordsOnClick
        try {
            // Define the title (header) to display at the top of the printed page
            String title = "Leenda - User Data Report";

            // Get the current date and time to display at the bottom (footer) of the page
            String footer = "Generated on: " + new SimpleDateFormat("EEEE, d MMM yyyy hh:mm:ss a").format(new Date());

            // Use the JTable's print method, adding both a header and a footer
            boolean complete = tblUsers.print(JTable.PrintMode.FIT_WIDTH, new MessageFormat(title),
                    new MessageFormat(footer));
            if (complete) {
                // If printing is complete, show a success message
                JOptionPane.showMessageDialog(null, "Printing Complete", "Print", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // If printing was cancelled, show a message
                JOptionPane.showMessageDialog(null, "Printing Cancelled", "Print", JOptionPane.WARNING_MESSAGE);
            }
        } catch (HeadlessException | PrinterException ex) {
            // If an error occurs during printing, show an error message
            JOptionPane.showMessageDialog(null, "Error printing table: " + ex.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_btnPrintUserRecordsOnClick

    private void btnLogoutOnClick(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_btnLogoutOnClick
        this.dispose();
        new LoginPage();
    }// GEN-LAST:event_btnLogoutOnClick

    private void btnChangeUserStatusOnClick(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnChangeUserStatusOnClick
        String userID = txtUserIDToDeleteOrChangeStatus.getText().trim(); // Get and trim the user ID input

        // Check if the user ID is empty
        if (Validation.checkIfTheTextFieldIsEmpty(userID, "user ID")) {
            return; // Exit if user ID is empty
        }

        // Get the selected status from the combo box
        String newStatus = cboUserStatus.getSelectedItem().toString();

        // Check if the user exists and get their current status
        String currentStatus = StorageFunctions.getCurrentUserStatus(userID); // Implement this method to retrieve the
                                                                              // user's current status

        if (currentStatus == null) {
            JOptionPane.showMessageDialog(this, "User ID does not exist.", "User Not Found", JOptionPane.ERROR_MESSAGE);
            return; // Exit if user does not exist
        }

        // Check if the status is different
        if (currentStatus.equals(newStatus)) {
            JOptionPane.showMessageDialog(this, "The user status is already set to " + newStatus + ".",
                    "Status Unchanged", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Confirm with the user before changing the status
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to change the status to " + newStatus + "?", "Confirm Status Change",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Proceed to change the status
                StorageFunctions.updateUserStatus(userID, newStatus); // Implement this method to update the user's
                                                                      // status in the file
                JOptionPane.showMessageDialog(this, "User status changed successfully.", "Status Changed",
                        JOptionPane.INFORMATION_MESSAGE);
                // Call the method and pass the path to the CSV file
                try {
                    populateTable(tblUsers, "src\\storage\\userDetails.csv");
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                txtUserIDToDeleteOrChangeStatus.setText("");
            }
        }
    }// GEN-LAST:event_btnChangeUserStatusOnClick

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagementPage.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagementPage.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagementPage.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagementPage.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagementPage(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnChangeUserStatus;
    private javax.swing.JToggleButton btnDeletePersonalInformation;
    private javax.swing.JToggleButton btnEditUsersPersonalInformation;
    private javax.swing.JToggleButton btnLogout;
    private javax.swing.JToggleButton btnPrintUserRecords;
    private javax.swing.JComboBox<String> cboUserStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBookings;
    private javax.swing.JLabel lblCarListing;
    private javax.swing.JLabel lblDashboard;
    private javax.swing.JLabel lblDashboardHeader;
    private javax.swing.JLabel lblDriverLicense;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblLeenda;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JLabel lblUserIDToDelete;
    private javax.swing.JLabel lblUserManagement;
    private javax.swing.JPanel pnlEditUserPersonalInformation;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSubHeader;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtDriverLicense;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUserIDToDeleteOrChangeStatus;
    // End of variables declaration//GEN-END:variables
}

/**
 *
 * @author: <edande - 223134902/>
 */